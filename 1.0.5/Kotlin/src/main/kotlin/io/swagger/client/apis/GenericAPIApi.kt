/**
 * Smart Tribune V2 API
 * The purpose of this API is to allow developers to build front-end interfaces for displaying knowledge base data (Faq, Helpbox, Chatbot ...) ## Authorization and API Requests To access the API, all requests need an api-token to be passed in the Authorization request header as a bearer token. **Authorization**: Bearer api-token You can retrieve your api-token using the POST request to **_/v1/auth**.  ## Rate Limiting  We currently limit the number of API requests per IP address on a specific window of 1s. When the rate limit is exceeded for a given API endpoint, the API will return either HTTP 429 Too Many Requests or HTTP 503 Service Unavailable response.  ### Find below Standard API rate limits per window:  | Endpoints | User limit per window | |---|---| | POST  *_/v1/auth* | 2 | | GET   *_/v1/knowledge-bases* | 2 | | POST  *_/v1/knowledge-bases/{id}/filtered/questions* | 10 | | POST  *_/v1/knowledge-bases/{id}/filtered/thematics* | 10 | | GET   *_/v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses* | 10 | | POST  *_/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions* | 2 | | GET   *_/v1/knowledge-bases/{id}/reasons* | 2 | | GET   *_/v1/knowledge-bases/{id}/reasons-comments* | 2 | | PATCH *_/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}* | 2 | | GET *_/v1/knowledge-bases/{id}/contacts* | 2 | 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: devs@smart-tribune.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Error
import io.swagger.client.models.ForbiddenError
import io.swagger.client.models.InlineResponse2003
import io.swagger.client.models.InlineResponse2004
import io.swagger.client.models.InlineResponse2005
import io.swagger.client.models.InlineResponse2006
import io.swagger.client.models.InlineResponse2007
import io.swagger.client.models.InlineResponse2008
import io.swagger.client.models.InlineResponse2009
import io.swagger.client.models.NotFoundError
import io.swagger.client.models.ResponseIdResponsessatisfactionsBody
import io.swagger.client.models.ResponsessatisfactionsSatisfactionIdBody
import io.swagger.client.models.ServiceUnavailableError
import io.swagger.client.models.TooManyRequestError
import io.swagger.client.models.UnauthorizedError

import io.swagger.client.infrastructure.*

class GenericAPIApi(basePath: kotlin.String = "https://api-gateway.app.smart-tribune.com/") : ApiClient(basePath) {

    /**
     * Fetch allowed Knowledge bases
     * 
     * @param acceptLanguage Language locale to filter api results 
     * @return InlineResponse2003
     */
    @Suppress("UNCHECKED_CAST")
    fun v1KnowledgeBasesGet(acceptLanguage: kotlin.String): InlineResponse2003 {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/knowledge-bases", headers = localVariableHeaders
        )
        val response = request<InlineResponse2003>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetch available Contact methods
     * 
     * @param id The Knowledgebase id that needs to be fetched. 
     * @param acceptLanguage Language locale to filter api results 
     * @return InlineResponse2009
     */
    @Suppress("UNCHECKED_CAST")
    fun v1KnowledgeBasesIdContactsGet(id: kotlin.Int, acceptLanguage: kotlin.String): InlineResponse2009 {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/knowledge-bases/{id}/contacts".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<InlineResponse2009>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetch Response related to a specified Question for a specific Channel
     * 
     * @param id The Knowledgebase id that needs to be fetched. 
     * @param questionId The Question id that needs to be fetched. 
     * @param channelId The Channel id that needs to be fetched. 
     * @param acceptLanguage Language locale to filter api results 
     * @return InlineResponse2004
     */
    @Suppress("UNCHECKED_CAST")
    fun v1KnowledgeBasesIdQuestionsQuestionIdChannelsChannelIdResponsesGet(id: kotlin.Int, questionId: kotlin.Int, channelId: kotlin.Int, acceptLanguage: kotlin.String): InlineResponse2004 {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses".replace("{" + "id" + "}", "$id").replace("{" + "questionId" + "}", "$questionId").replace("{" + "channelId" + "}", "$channelId"), headers = localVariableHeaders
        )
        val response = request<InlineResponse2004>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Post a Response Satisfaction on a specified Response
     * 
     * @param acceptLanguage Language locale to filter api results 
     * @param id The knowledgebase id that needs to be fetched. 
     * @param questionId The Question id that needs to be fetched. 
     * @param responseId The Response id that needs to be fetched. 
     * @param body  (optional)
     * @return InlineResponse2005
     */
    @Suppress("UNCHECKED_CAST")
    fun v1KnowledgeBasesIdQuestionsQuestionIdResponsesResponseIdResponsesSatisfactionsPost(acceptLanguage: kotlin.String, id: kotlin.Int, questionId: kotlin.Int, responseId: kotlin.Int, body: ResponseIdResponsessatisfactionsBody? = null): InlineResponse2005 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions".replace("{" + "id" + "}", "$id").replace("{" + "questionId" + "}", "$questionId").replace("{" + "responseId" + "}", "$responseId"), headers = localVariableHeaders
        )
        val response = request<InlineResponse2005>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update a Response Satisfaction on a specified Response to provide a Reason
     * 
     * @param acceptLanguage Language locale to filter api results 
     * @param id The knowledgebase id that needs to be fetched. 
     * @param questionId The Question id that needs to be fetched. 
     * @param responseId The Response id that needs to be fetched. 
     * @param satisfactionId The Response satisfaction id that needs to be fetched. 
     * @param body  (optional)
     * @return InlineResponse2008
     */
    @Suppress("UNCHECKED_CAST")
    fun v1KnowledgeBasesIdQuestionsQuestionIdResponsesResponseIdResponsesSatisfactionsSatisfactionIdPatch(acceptLanguage: kotlin.String, id: kotlin.Int, questionId: kotlin.Int, responseId: kotlin.Int, satisfactionId: kotlin.Int, body: ResponsessatisfactionsSatisfactionIdBody? = null): InlineResponse2008 {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage)
        val localVariableConfig = RequestConfig(
                RequestMethod.PATCH,
                "/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}".replace("{" + "id" + "}", "$id").replace("{" + "questionId" + "}", "$questionId").replace("{" + "responseId" + "}", "$responseId").replace("{" + "satisfactionId" + "}", "$satisfactionId"), headers = localVariableHeaders
        )
        val response = request<InlineResponse2008>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetch available comments for negative vote Reasons
     * 
     * @param id The Knowledgebase id that needs to be fetched. 
     * @param acceptLanguage Language locale to filter api results 
     * @param startDate Start Date in yyyy-mm-dd format. Comments fetched are created at startDate (between 00:00:00 and 23:59:59) 
     * @param channel The channel name of the responses affected by comments 
     * @param extended used to display additional information : thematics list and response content associated to the question (optional)
     * @return InlineResponse2007
     */
    @Suppress("UNCHECKED_CAST")
    fun v1KnowledgeBasesIdReasonCommentsGet(id: kotlin.Int, acceptLanguage: kotlin.String, startDate: kotlin.String, channel: kotlin.String, extended: kotlin.Boolean? = null): InlineResponse2007 {
        val localVariableQuery: MultiValueMap = mapOf("startDate" to listOf("$startDate"), "channel" to listOf("$channel"), "extended" to listOf("$extended"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/knowledge-bases/{id}/reason-comments".replace("{" + "id" + "}", "$id"), query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<InlineResponse2007>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2007
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fetch available negative vote Reasons
     * 
     * @param id The Knowledgebase id that needs to be fetched. 
     * @param acceptLanguage Language locale to filter api results 
     * @return InlineResponse2006
     */
    @Suppress("UNCHECKED_CAST")
    fun v1KnowledgeBasesIdReasonsGet(id: kotlin.Int, acceptLanguage: kotlin.String): InlineResponse2006 {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Accept-Language" to acceptLanguage)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/knowledge-bases/{id}/reasons".replace("{" + "id" + "}", "$id"), headers = localVariableHeaders
        )
        val response = request<InlineResponse2006>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2006
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
