# coding: utf-8

"""
    Smart Tribune V2 API

    The purpose of this API is to allow developers to build front-end interfaces for displaying knowledge base data (Faq, Helpbox, Chatbot ...) ## Authorization and API Requests To access the API, all requests need an api-token to be passed in the Authorization request header as a bearer token. **Authorization**: Bearer api-token You can retrieve your api-token using the POST request to **/v1/auth**.  ## Rate Limiting  We currently limit the number of API requests per IP address on a specific window of 1s. When the rate limit is exceeded for a given API endpoint, the API will return either HTTP 429 Too Many Requests or HTTP 503 Service Unavailable response.  ### Find below Standard API rate limits per window:  | Endpoints | User limit per window | |---|---| | POST  */v1/auth* | 2 | | GET   */v1/knowledge-bases* | 2 | | POST  */v1/knowledge-bases/{id}/filtered/questions* | 10 | | POST  */v1/knowledge-bases/{id}/filtered/thematics* | 10 | | GET   */v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses* | 10 | | POST  */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions* | 2 | | GET   */v1/knowledge-bases/{id}/reasons* | 2 | | GET   */v1/knowledge-bases/{id}/reasons-comments* | 2 | | PATCH */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}* | 2 | | GET */v1/knowledge-bases/{id}/contacts* | 2 |   # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: devs@smart-tribune.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone': 'str',
        'title': 'str',
        'description': 'str',
        'apply_all_questions': 'bool',
        'is_active': 'bool',
        'channels': 'list[str]',
        'tags': 'list[str]'
    }

    attribute_map = {
        'phone': 'phone',
        'title': 'title',
        'description': 'description',
        'apply_all_questions': 'applyAllQuestions',
        'is_active': 'isActive',
        'channels': 'channels',
        'tags': 'tags'
    }

    def __init__(self, phone=None, title=None, description=None, apply_all_questions=None, is_active=None, channels=None, tags=None):  # noqa: E501
        """ContactConfiguration - a model defined in Swagger"""  # noqa: E501
        self._phone = None
        self._title = None
        self._description = None
        self._apply_all_questions = None
        self._is_active = None
        self._channels = None
        self._tags = None
        self.discriminator = None
        if phone is not None:
            self.phone = phone
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if apply_all_questions is not None:
            self.apply_all_questions = apply_all_questions
        if is_active is not None:
            self.is_active = is_active
        if channels is not None:
            self.channels = channels
        if tags is not None:
            self.tags = tags

    @property
    def phone(self):
        """Gets the phone of this ContactConfiguration.  # noqa: E501


        :return: The phone of this ContactConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactConfiguration.


        :param phone: The phone of this ContactConfiguration.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def title(self):
        """Gets the title of this ContactConfiguration.  # noqa: E501


        :return: The title of this ContactConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContactConfiguration.


        :param title: The title of this ContactConfiguration.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this ContactConfiguration.  # noqa: E501


        :return: The description of this ContactConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContactConfiguration.


        :param description: The description of this ContactConfiguration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def apply_all_questions(self):
        """Gets the apply_all_questions of this ContactConfiguration.  # noqa: E501


        :return: The apply_all_questions of this ContactConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._apply_all_questions

    @apply_all_questions.setter
    def apply_all_questions(self, apply_all_questions):
        """Sets the apply_all_questions of this ContactConfiguration.


        :param apply_all_questions: The apply_all_questions of this ContactConfiguration.  # noqa: E501
        :type: bool
        """

        self._apply_all_questions = apply_all_questions

    @property
    def is_active(self):
        """Gets the is_active of this ContactConfiguration.  # noqa: E501


        :return: The is_active of this ContactConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ContactConfiguration.


        :param is_active: The is_active of this ContactConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def channels(self):
        """Gets the channels of this ContactConfiguration.  # noqa: E501


        :return: The channels of this ContactConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ContactConfiguration.


        :param channels: The channels of this ContactConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._channels = channels

    @property
    def tags(self):
        """Gets the tags of this ContactConfiguration.  # noqa: E501


        :return: The tags of this ContactConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ContactConfiguration.


        :param tags: The tags of this ContactConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
