# coding: utf-8

"""
    Smart Tribune V2 API

    The purpose of this API is to allow developers to build front-end interfaces for displaying knowledge base data (Faq, Helpbox, Chatbot ...) ## Authorization and API Requests To access the API, all requests need an api-token to be passed in the Authorization request header as a bearer token. **Authorization**: Bearer api-token You can retrieve your api-token using the POST request to **/v1/auth**.  ## Rate Limiting  We currently limit the number of API requests per IP address on a specific window of 1s. When the rate limit is exceeded for a given API endpoint, the API will return either HTTP 429 Too Many Requests or HTTP 503 Service Unavailable response.  ### Find below Standard API rate limits per window:  | Endpoints | User limit per window | |---|---| | POST  */v1/auth* | 2 | | GET   */v1/knowledge-bases* | 2 | | POST  */v1/knowledge-bases/{id}/filtered/questions* | 10 | | POST  */v1/knowledge-bases/{id}/filtered/thematics* | 10 | | GET   */v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses* | 10 | | POST  */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions* | 2 | | GET   */v1/knowledge-bases/{id}/reasons* | 2 | | GET   */v1/knowledge-bases/{id}/reasons-comments* | 2 | | PATCH */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}* | 2 | | GET */v1/knowledge-bases/{id}/contacts* | 2 |   # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: devs@smart-tribune.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaWithQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'current_items': 'int',
        'total_items': 'int',
        'offset': 'int',
        'current_page': 'int',
        'number_page': 'int',
        'original_query': 'str',
        'executed_query': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'current_items': 'currentItems',
        'total_items': 'totalItems',
        'offset': 'offset',
        'current_page': 'currentPage',
        'number_page': 'numberPage',
        'original_query': 'originalQuery',
        'executed_query': 'executedQuery'
    }

    def __init__(self, limit=None, current_items=None, total_items=None, offset=None, current_page=None, number_page=None, original_query=None, executed_query=None):  # noqa: E501
        """MetaWithQuery - a model defined in Swagger"""  # noqa: E501
        self._limit = None
        self._current_items = None
        self._total_items = None
        self._offset = None
        self._current_page = None
        self._number_page = None
        self._original_query = None
        self._executed_query = None
        self.discriminator = None
        if limit is not None:
            self.limit = limit
        if current_items is not None:
            self.current_items = current_items
        if total_items is not None:
            self.total_items = total_items
        if offset is not None:
            self.offset = offset
        if current_page is not None:
            self.current_page = current_page
        if number_page is not None:
            self.number_page = number_page
        if original_query is not None:
            self.original_query = original_query
        if executed_query is not None:
            self.executed_query = executed_query

    @property
    def limit(self):
        """Gets the limit of this MetaWithQuery.  # noqa: E501


        :return: The limit of this MetaWithQuery.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this MetaWithQuery.


        :param limit: The limit of this MetaWithQuery.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def current_items(self):
        """Gets the current_items of this MetaWithQuery.  # noqa: E501


        :return: The current_items of this MetaWithQuery.  # noqa: E501
        :rtype: int
        """
        return self._current_items

    @current_items.setter
    def current_items(self, current_items):
        """Sets the current_items of this MetaWithQuery.


        :param current_items: The current_items of this MetaWithQuery.  # noqa: E501
        :type: int
        """

        self._current_items = current_items

    @property
    def total_items(self):
        """Gets the total_items of this MetaWithQuery.  # noqa: E501


        :return: The total_items of this MetaWithQuery.  # noqa: E501
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this MetaWithQuery.


        :param total_items: The total_items of this MetaWithQuery.  # noqa: E501
        :type: int
        """

        self._total_items = total_items

    @property
    def offset(self):
        """Gets the offset of this MetaWithQuery.  # noqa: E501


        :return: The offset of this MetaWithQuery.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this MetaWithQuery.


        :param offset: The offset of this MetaWithQuery.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def current_page(self):
        """Gets the current_page of this MetaWithQuery.  # noqa: E501


        :return: The current_page of this MetaWithQuery.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this MetaWithQuery.


        :param current_page: The current_page of this MetaWithQuery.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def number_page(self):
        """Gets the number_page of this MetaWithQuery.  # noqa: E501


        :return: The number_page of this MetaWithQuery.  # noqa: E501
        :rtype: int
        """
        return self._number_page

    @number_page.setter
    def number_page(self, number_page):
        """Sets the number_page of this MetaWithQuery.


        :param number_page: The number_page of this MetaWithQuery.  # noqa: E501
        :type: int
        """

        self._number_page = number_page

    @property
    def original_query(self):
        """Gets the original_query of this MetaWithQuery.  # noqa: E501


        :return: The original_query of this MetaWithQuery.  # noqa: E501
        :rtype: str
        """
        return self._original_query

    @original_query.setter
    def original_query(self, original_query):
        """Sets the original_query of this MetaWithQuery.


        :param original_query: The original_query of this MetaWithQuery.  # noqa: E501
        :type: str
        """

        self._original_query = original_query

    @property
    def executed_query(self):
        """Gets the executed_query of this MetaWithQuery.  # noqa: E501


        :return: The executed_query of this MetaWithQuery.  # noqa: E501
        :rtype: str
        """
        return self._executed_query

    @executed_query.setter
    def executed_query(self, executed_query):
        """Sets the executed_query of this MetaWithQuery.


        :param executed_query: The executed_query of this MetaWithQuery.  # noqa: E501
        :type: str
        """

        self._executed_query = executed_query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaWithQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaWithQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
