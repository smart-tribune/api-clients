# coding: utf-8

"""
    Smart Tribune V2 API

    The purpose of this API is to allow developers to build front-end interfaces for displaying knowledge base data (Faq, Helpbox, Chatbot ...) ## Authorization and API Requests To access the API, all requests need an api-token to be passed in the Authorization request header as a bearer token. **Authorization**: Bearer api-token You can retrieve your api-token using the POST request to **/v1/auth**.  ## Rate Limiting  We currently limit the number of API requests per IP address on a specific window of 1s. When the rate limit is exceeded for a given API endpoint, the API will return either HTTP 429 Too Many Requests or HTTP 503 Service Unavailable response.  ### Find below Standard API rate limits per window:  | Endpoints | User limit per window | |---|---| | POST  */v1/auth* | 2 | | GET   */v1/knowledge-bases* | 2 | | POST  */v1/knowledge-bases/{id}/filtered/questions* | 10 | | POST  */v1/knowledge-bases/{id}/filtered/thematics* | 10 | | GET   */v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses* | 10 | | POST  */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions* | 2 | | GET   */v1/knowledge-bases/{id}/reasons* | 2 | | GET   */v1/knowledge-bases/{id}/reasons-comments* | 2 | | PATCH */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}* | 2 | | GET */v1/knowledge-bases/{id}/contacts* | 2 |   # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: devs@smart-tribune.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GenericAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_knowledge_bases_get(self, accept_language, **kwargs):  # noqa: E501
        """Fetch allowed Knowledge bases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_get(accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_get_with_http_info(accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_get_with_http_info(accept_language, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_get_with_http_info(self, accept_language, **kwargs):  # noqa: E501
        """Fetch allowed Knowledge bases  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_get_with_http_info(accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_knowledge_bases_id_contacts_get(self, id, accept_language, **kwargs):  # noqa: E501
        """Fetch available Contact methods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_contacts_get(id, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_contacts_get_with_http_info(id, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_contacts_get_with_http_info(id, accept_language, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_contacts_get_with_http_info(self, id, accept_language, **kwargs):  # noqa: E501
        """Fetch available Contact methods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_contacts_get_with_http_info(id, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_contacts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_contacts_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_contacts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/contacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get(self, id, question_id, channel_id, accept_language, **kwargs):  # noqa: E501
        """Fetch Response related to a specified Question for a specific Channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get(id, question_id, channel_id, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param int question_id: The Question id that needs to be fetched. (required)
        :param int channel_id: The Channel id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get_with_http_info(id, question_id, channel_id, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get_with_http_info(id, question_id, channel_id, accept_language, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get_with_http_info(self, id, question_id, channel_id, accept_language, **kwargs):  # noqa: E501
        """Fetch Response related to a specified Question for a specific Channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get_with_http_info(id, question_id, channel_id, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param int question_id: The Question id that needs to be fetched. (required)
        :param int channel_id: The Channel id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'question_id', 'channel_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get`")  # noqa: E501
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params or
                params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params or
                params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post(self, accept_language, id, question_id, response_id, **kwargs):  # noqa: E501
        """Post a Response Satisfaction on a specified Response  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post(accept_language, id, question_id, response_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase id that needs to be fetched. (required)
        :param int question_id: The Question id that needs to be fetched. (required)
        :param int response_id: The Response id that needs to be fetched. (required)
        :param ResponseIdResponsessatisfactionsBody body:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post_with_http_info(accept_language, id, question_id, response_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post_with_http_info(accept_language, id, question_id, response_id, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post_with_http_info(self, accept_language, id, question_id, response_id, **kwargs):  # noqa: E501
        """Post a Response Satisfaction on a specified Response  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post_with_http_info(accept_language, id, question_id, response_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase id that needs to be fetched. (required)
        :param int question_id: The Question id that needs to be fetched. (required)
        :param int response_id: The Response id that needs to be fetched. (required)
        :param ResponseIdResponsessatisfactionsBody body:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'id', 'question_id', 'response_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post`")  # noqa: E501
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params or
                params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post`")  # noqa: E501
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params or
                params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']  # noqa: E501
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch(self, accept_language, id, question_id, response_id, satisfaction_id, **kwargs):  # noqa: E501
        """Update a Response Satisfaction on a specified Response to provide a Reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch(accept_language, id, question_id, response_id, satisfaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase id that needs to be fetched. (required)
        :param int question_id: The Question id that needs to be fetched. (required)
        :param int response_id: The Response id that needs to be fetched. (required)
        :param int satisfaction_id: The Response satisfaction id that needs to be fetched. (required)
        :param ResponsessatisfactionsSatisfactionIdBody body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch_with_http_info(accept_language, id, question_id, response_id, satisfaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch_with_http_info(accept_language, id, question_id, response_id, satisfaction_id, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch_with_http_info(self, accept_language, id, question_id, response_id, satisfaction_id, **kwargs):  # noqa: E501
        """Update a Response Satisfaction on a specified Response to provide a Reason  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch_with_http_info(accept_language, id, question_id, response_id, satisfaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase id that needs to be fetched. (required)
        :param int question_id: The Question id that needs to be fetched. (required)
        :param int response_id: The Response id that needs to be fetched. (required)
        :param int satisfaction_id: The Response satisfaction id that needs to be fetched. (required)
        :param ResponsessatisfactionsSatisfactionIdBody body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'id', 'question_id', 'response_id', 'satisfaction_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch`")  # noqa: E501
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params or
                params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch`")  # noqa: E501
        # verify the required parameter 'response_id' is set
        if ('response_id' not in params or
                params['response_id'] is None):
            raise ValueError("Missing the required parameter `response_id` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch`")  # noqa: E501
        # verify the required parameter 'satisfaction_id' is set
        if ('satisfaction_id' not in params or
                params['satisfaction_id'] is None):
            raise ValueError("Missing the required parameter `satisfaction_id` when calling `v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']  # noqa: E501
        if 'response_id' in params:
            path_params['responseId'] = params['response_id']  # noqa: E501
        if 'satisfaction_id' in params:
            path_params['satisfactionId'] = params['satisfaction_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_knowledge_bases_id_reason_comments_get(self, id, accept_language, start_date, channel, **kwargs):  # noqa: E501
        """Fetch available comments for negative vote Reasons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_reason_comments_get(id, accept_language, start_date, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :param str start_date: Start Date in yyyy-mm-dd format. Comments fetched are created at startDate (between 00:00:00 and 23:59:59) (required)
        :param str channel: The channel name of the responses affected by comments (required)
        :param bool extended: used to display additional information : thematics list and response content associated to the question
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_reason_comments_get_with_http_info(id, accept_language, start_date, channel, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_reason_comments_get_with_http_info(id, accept_language, start_date, channel, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_reason_comments_get_with_http_info(self, id, accept_language, start_date, channel, **kwargs):  # noqa: E501
        """Fetch available comments for negative vote Reasons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_reason_comments_get_with_http_info(id, accept_language, start_date, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :param str start_date: Start Date in yyyy-mm-dd format. Comments fetched are created at startDate (between 00:00:00 and 23:59:59) (required)
        :param str channel: The channel name of the responses affected by comments (required)
        :param bool extended: used to display additional information : thematics list and response content associated to the question
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'start_date', 'channel', 'extended']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_reason_comments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_reason_comments_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_reason_comments_get`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `v1_knowledge_bases_id_reason_comments_get`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if ('channel' not in params or
                params['channel'] is None):
            raise ValueError("Missing the required parameter `channel` when calling `v1_knowledge_bases_id_reason_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501
        if 'extended' in params:
            query_params.append(('extended', params['extended']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/reason-comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_knowledge_bases_id_reasons_get(self, id, accept_language, **kwargs):  # noqa: E501
        """Fetch available negative vote Reasons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_reasons_get(id, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_reasons_get_with_http_info(id, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_reasons_get_with_http_info(id, accept_language, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_reasons_get_with_http_info(self, id, accept_language, **kwargs):  # noqa: E501
        """Fetch available negative vote Reasons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_reasons_get_with_http_info(id, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Knowledgebase id that needs to be fetched. (required)
        :param str accept_language: Language locale to filter api results (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_reasons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_reasons_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_reasons_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/reasons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
