# coding: utf-8

"""
    Smart Tribune V2 API

    The purpose of this API is to allow developers to build front-end interfaces for displaying knowledge base data (Faq, Helpbox, Chatbot ...) ## Authorization and API Requests To access the API, all requests need an api-token to be passed in the Authorization request header as a bearer token. **Authorization**: Bearer api-token You can retrieve your api-token using the POST request to **/v1/auth**.  ## Rate Limiting  We currently limit the number of API requests per IP address on a specific window of 1s. When the rate limit is exceeded for a given API endpoint, the API will return either HTTP 429 Too Many Requests or HTTP 503 Service Unavailable response.  ### Find below Standard API rate limits per window:  | Endpoints | User limit per window | |---|---| | POST  */v1/auth* | 2 | | GET   */v1/knowledge-bases* | 2 | | POST  */v1/knowledge-bases/{id}/filtered/questions* | 10 | | POST  */v1/knowledge-bases/{id}/filtered/thematics* | 10 | | GET   */v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses* | 10 | | POST  */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions* | 2 | | GET   */v1/knowledge-bases/{id}/reasons* | 2 | | GET   */v1/knowledge-bases/{id}/reasons-comments* | 2 | | PATCH */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}* | 2 | | GET */v1/knowledge-bases/{id}/contacts* | 2 |   # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: devs@smart-tribune.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FilteredAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_knowledge_bases_id_filtered_questions_post(self, accept_language, id, **kwargs):  # noqa: E501
        """Fetch a (list of) Question(s) depend on specified Filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_filtered_questions_post(accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase Id that needs to be fetched. (required)
        :param FilteredQuestionsPayload body: **Example of payloads to fetch** :

 * Promoted Questions within Smart FAQ Channel
     ```javascript
      {
        "channel": "faq",
        "promoted": true
      }
     ```

 * Frequent Questions within Smart FAQ Channel
     ```javascript
     {
       "channel": "faq",
       "frequent": true
     }
     ```

 * Related questions within Smart FAQ channel for thematic systemName "how-to-make-booking-987" and Question id 19
     ```javascript
     {
       "channel" : "faq",
       "excludedQuestions" : [19],
       "searchFilters": [
           {
               "name": "thematic-system-name-859",
               "type": "thematic"
           }
       ]
     }
     ```

 * Search results within Smart FAQ Channel
     ```javascript
     {
       "channel": "faq",
       "query": "my search query"
       "useSuggester": true
     }
     ```

 * Single Question by slug
     ```javascript
     {
       "channel": "faq",
       "questionSlug": "my-question-slug"
     }
     ```

 * Questions filtered by Thematic with slug "my-thematic"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "slug": "my-thematic-slug",
               "type": "thematic"
           }
       ]
     }
     ```
  * Questions filtered using Tags with name "my-tag-1" OR "my-tag-2"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "name": "my-tag-1",
               "type": "tag"
           },
           {
               "name": "my-tag-2",
               "type": "tag"
           }
       ],
       "searchFiltersOperators": [
          { "tag" : "OR" }
        ]
     }
     ```
 * Questions filtered by Thematic with systemName "tag-system-name-568" AND Tag with systemName "my-tag-14"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "name": "thematic-system-name-859",
               "type": "thematic"
           },
           {
               "name": "tag-system-name-568",
               "type": "tag"
           }
       ]
     }
     ```

        :param int page: Page identifier
        :param int limit: Items per page
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_filtered_questions_post_with_http_info(accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_filtered_questions_post_with_http_info(accept_language, id, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_filtered_questions_post_with_http_info(self, accept_language, id, **kwargs):  # noqa: E501
        """Fetch a (list of) Question(s) depend on specified Filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_filtered_questions_post_with_http_info(accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase Id that needs to be fetched. (required)
        :param FilteredQuestionsPayload body: **Example of payloads to fetch** :

 * Promoted Questions within Smart FAQ Channel
     ```javascript
      {
        "channel": "faq",
        "promoted": true
      }
     ```

 * Frequent Questions within Smart FAQ Channel
     ```javascript
     {
       "channel": "faq",
       "frequent": true
     }
     ```

 * Related questions within Smart FAQ channel for thematic systemName "how-to-make-booking-987" and Question id 19
     ```javascript
     {
       "channel" : "faq",
       "excludedQuestions" : [19],
       "searchFilters": [
           {
               "name": "thematic-system-name-859",
               "type": "thematic"
           }
       ]
     }
     ```

 * Search results within Smart FAQ Channel
     ```javascript
     {
       "channel": "faq",
       "query": "my search query"
       "useSuggester": true
     }
     ```

 * Single Question by slug
     ```javascript
     {
       "channel": "faq",
       "questionSlug": "my-question-slug"
     }
     ```

 * Questions filtered by Thematic with slug "my-thematic"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "slug": "my-thematic-slug",
               "type": "thematic"
           }
       ]
     }
     ```
  * Questions filtered using Tags with name "my-tag-1" OR "my-tag-2"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "name": "my-tag-1",
               "type": "tag"
           },
           {
               "name": "my-tag-2",
               "type": "tag"
           }
       ],
       "searchFiltersOperators": [
          { "tag" : "OR" }
        ]
     }
     ```
 * Questions filtered by Thematic with systemName "tag-system-name-568" AND Tag with systemName "my-tag-14"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "name": "thematic-system-name-859",
               "type": "thematic"
           },
           {
               "name": "tag-system-name-568",
               "type": "tag"
           }
       ]
     }
     ```

        :param int page: Page identifier
        :param int limit: Items per page
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'id', 'body', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_filtered_questions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_filtered_questions_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_filtered_questions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/filtered/questions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_knowledge_bases_id_filtered_thematics_post(self, accept_language, id, **kwargs):  # noqa: E501
        """Fetch a (list of) Thematic(s) depend on specified Filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_filtered_thematics_post(accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase Id that needs to be fetched. (required)
        :param FilteredThematicsPayload body: **Example of payloads to fetch** :

  * Thematics filtered by SystemName "how-to-make-booking-987"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "name": "how-to-make-booking-987",
               "type": "thematic"
           }
       ]
     }
      ```

  * Thematics filtered by slug "my-thematic"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "slug": "my-thematic-slug",
               "type": "thematic"
           }
       ]
     }
      ```

        :param int page: Page identifier
        :param int limit: Items per page
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_knowledge_bases_id_filtered_thematics_post_with_http_info(accept_language, id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_knowledge_bases_id_filtered_thematics_post_with_http_info(accept_language, id, **kwargs)  # noqa: E501
            return data

    def v1_knowledge_bases_id_filtered_thematics_post_with_http_info(self, accept_language, id, **kwargs):  # noqa: E501
        """Fetch a (list of) Thematic(s) depend on specified Filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_knowledge_bases_id_filtered_thematics_post_with_http_info(accept_language, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Language locale to filter api results (required)
        :param int id: The knowledgebase Id that needs to be fetched. (required)
        :param FilteredThematicsPayload body: **Example of payloads to fetch** :

  * Thematics filtered by SystemName "how-to-make-booking-987"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "name": "how-to-make-booking-987",
               "type": "thematic"
           }
       ]
     }
      ```

  * Thematics filtered by slug "my-thematic"
     ```javascript
     {
       "channel": "faq",
       "searchFilters": [
           {
               "slug": "my-thematic-slug",
               "type": "thematic"
           }
       ]
     }
      ```

        :param int page: Page identifier
        :param int limit: Items per page
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'id', 'body', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_knowledge_bases_id_filtered_thematics_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_language' is set
        if ('accept_language' not in params or
                params['accept_language'] is None):
            raise ValueError("Missing the required parameter `accept_language` when calling `v1_knowledge_bases_id_filtered_thematics_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_knowledge_bases_id_filtered_thematics_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/knowledge-bases/{id}/filtered/thematics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
