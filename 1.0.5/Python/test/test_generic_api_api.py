# coding: utf-8

"""
    Smart Tribune V2 API

    The purpose of this API is to allow developers to build front-end interfaces for displaying knowledge base data (Faq, Helpbox, Chatbot ...) ## Authorization and API Requests To access the API, all requests need an api-token to be passed in the Authorization request header as a bearer token. **Authorization**: Bearer api-token You can retrieve your api-token using the POST request to **/v1/auth**.  ## Rate Limiting  We currently limit the number of API requests per IP address on a specific window of 1s. When the rate limit is exceeded for a given API endpoint, the API will return either HTTP 429 Too Many Requests or HTTP 503 Service Unavailable response.  ### Find below Standard API rate limits per window:  | Endpoints | User limit per window | |---|---| | POST  */v1/auth* | 2 | | GET   */v1/knowledge-bases* | 2 | | POST  */v1/knowledge-bases/{id}/filtered/questions* | 10 | | POST  */v1/knowledge-bases/{id}/filtered/thematics* | 10 | | GET   */v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses* | 10 | | POST  */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions* | 2 | | GET   */v1/knowledge-bases/{id}/reasons* | 2 | | GET   */v1/knowledge-bases/{id}/reasons-comments* | 2 | | PATCH */v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}* | 2 | | GET */v1/knowledge-bases/{id}/contacts* | 2 |   # noqa: E501

    OpenAPI spec version: 1.0.5
    Contact: devs@smart-tribune.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.generic_api_api import GenericAPIApi  # noqa: E501
from swagger_client.rest import ApiException


class TestGenericAPIApi(unittest.TestCase):
    """GenericAPIApi unit test stubs"""

    def setUp(self):
        self.api = GenericAPIApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_v1_knowledge_bases_get(self):
        """Test case for v1_knowledge_bases_get

        Fetch allowed Knowledge bases  # noqa: E501
        """
        pass

    def test_v1_knowledge_bases_id_contacts_get(self):
        """Test case for v1_knowledge_bases_id_contacts_get

        Fetch available Contact methods  # noqa: E501
        """
        pass

    def test_v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get(self):
        """Test case for v1_knowledge_bases_id_questions_question_id_channels_channel_id_responses_get

        Fetch Response related to a specified Question for a specific Channel  # noqa: E501
        """
        pass

    def test_v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post(self):
        """Test case for v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_post

        Post a Response Satisfaction on a specified Response  # noqa: E501
        """
        pass

    def test_v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch(self):
        """Test case for v1_knowledge_bases_id_questions_question_id_responses_response_id_responses_satisfactions_satisfaction_id_patch

        Update a Response Satisfaction on a specified Response to provide a Reason  # noqa: E501
        """
        pass

    def test_v1_knowledge_bases_id_reason_comments_get(self):
        """Test case for v1_knowledge_bases_id_reason_comments_get

        Fetch available comments for negative vote Reasons  # noqa: E501
        """
        pass

    def test_v1_knowledge_bases_id_reasons_get(self):
        """Test case for v1_knowledge_bases_id_reasons_get

        Fetch available negative vote Reasons  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
