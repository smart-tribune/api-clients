<?php
/**
 * FilteredQuestionsPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Smart Tribune V2 API
 *
 * The purpose of this API is to allow developers to build front-end interfaces for displaying knowledge base data (Faq, Helpbox, Chatbot ...) ## Authorization and API Requests To access the API, all requests need an api-token to be passed in the Authorization request header as a bearer token. **Authorization**: Bearer api-token You can retrieve your api-token using the POST request to **_/v1/auth**.  ## Rate Limiting  We currently limit the number of API requests per IP address on a specific window of 1s. When the rate limit is exceeded for a given API endpoint, the API will return either HTTP 429 Too Many Requests or HTTP 503 Service Unavailable response.  ### Find below Standard API rate limits per window:  | Endpoints | User limit per window | |---|---| | POST  *_/v1/auth* | 2 | | GET   *_/v1/knowledge-bases* | 2 | | POST  *_/v1/knowledge-bases/{id}/filtered/questions* | 10 | | POST  *_/v1/knowledge-bases/{id}/filtered/thematics* | 10 | | GET   *_/v1/knowledge-bases/{id}/questions/{questionId}/channels/{channelId}/responses* | 10 | | POST  *_/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions* | 2 | | GET   *_/v1/knowledge-bases/{id}/reasons* | 2 | | GET   *_/v1/knowledge-bases/{id}/reasons-comments* | 2 | | PATCH *_/v1/knowledge-bases/{id}/questions/{questionId}/responses/{responseId}/responses-satisfactions/{satisfactionId}* | 2 | | GET *_/v1/knowledge-bases/{id}/contacts* | 2 |
 *
 * OpenAPI spec version: 1.0.5
 * Contact: devs@smart-tribune.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FilteredQuestionsPayload Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilteredQuestionsPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilteredQuestionsPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel' => 'string',
'promoted' => 'bool',
'frequent' => 'bool',
'query' => 'string',
'use_suggester' => 'bool',
'excluded_questions' => 'int[]',
'question_slug' => 'string',
'search_filters' => '\Swagger\Client\Model\AnyOfFilteredQuestionsPayloadSearchFiltersItems[]',
'search_filters_operators' => '\Swagger\Client\Model\AnyOfFilteredQuestionsPayloadSearchFiltersOperatorsItems[]',
'limit' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel' => null,
'promoted' => null,
'frequent' => null,
'query' => null,
'use_suggester' => null,
'excluded_questions' => null,
'question_slug' => null,
'search_filters' => null,
'search_filters_operators' => null,
'limit' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
'promoted' => 'promoted',
'frequent' => 'frequent',
'query' => 'query',
'use_suggester' => 'useSuggester',
'excluded_questions' => 'excludedQuestions',
'question_slug' => 'questionSlug',
'search_filters' => 'searchFilters',
'search_filters_operators' => 'searchFiltersOperators',
'limit' => 'limit'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
'promoted' => 'setPromoted',
'frequent' => 'setFrequent',
'query' => 'setQuery',
'use_suggester' => 'setUseSuggester',
'excluded_questions' => 'setExcludedQuestions',
'question_slug' => 'setQuestionSlug',
'search_filters' => 'setSearchFilters',
'search_filters_operators' => 'setSearchFiltersOperators',
'limit' => 'setLimit'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
'promoted' => 'getPromoted',
'frequent' => 'getFrequent',
'query' => 'getQuery',
'use_suggester' => 'getUseSuggester',
'excluded_questions' => 'getExcludedQuestions',
'question_slug' => 'getQuestionSlug',
'search_filters' => 'getSearchFilters',
'search_filters_operators' => 'getSearchFiltersOperators',
'limit' => 'getLimit'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHANNEL_FAQ = 'faq';
const CHANNEL_PUSH = 'push';
const CHANNEL_BOT = 'bot';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_FAQ,
self::CHANNEL_PUSH,
self::CHANNEL_BOT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['promoted'] = isset($data['promoted']) ? $data['promoted'] : null;
        $this->container['frequent'] = isset($data['frequent']) ? $data['frequent'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['use_suggester'] = isset($data['use_suggester']) ? $data['use_suggester'] : null;
        $this->container['excluded_questions'] = isset($data['excluded_questions']) ? $data['excluded_questions'] : null;
        $this->container['question_slug'] = isset($data['question_slug']) ? $data['question_slug'] : null;
        $this->container['search_filters'] = isset($data['search_filters']) ? $data['search_filters'] : null;
        $this->container['search_filters_operators'] = isset($data['search_filters_operators']) ? $data['search_filters_operators'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'channel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($channel) && !in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets promoted
     *
     * @return bool
     */
    public function getPromoted()
    {
        return $this->container['promoted'];
    }

    /**
     * Sets promoted
     *
     * @param bool $promoted promoted
     *
     * @return $this
     */
    public function setPromoted($promoted)
    {
        $this->container['promoted'] = $promoted;

        return $this;
    }

    /**
     * Gets frequent
     *
     * @return bool
     */
    public function getFrequent()
    {
        return $this->container['frequent'];
    }

    /**
     * Sets frequent
     *
     * @param bool $frequent frequent
     *
     * @return $this
     */
    public function setFrequent($frequent)
    {
        $this->container['frequent'] = $frequent;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query query
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets use_suggester
     *
     * @return bool
     */
    public function getUseSuggester()
    {
        return $this->container['use_suggester'];
    }

    /**
     * Sets use_suggester
     *
     * @param bool $use_suggester use_suggester
     *
     * @return $this
     */
    public function setUseSuggester($use_suggester)
    {
        $this->container['use_suggester'] = $use_suggester;

        return $this;
    }

    /**
     * Gets excluded_questions
     *
     * @return int[]
     */
    public function getExcludedQuestions()
    {
        return $this->container['excluded_questions'];
    }

    /**
     * Sets excluded_questions
     *
     * @param int[] $excluded_questions excluded_questions
     *
     * @return $this
     */
    public function setExcludedQuestions($excluded_questions)
    {
        $this->container['excluded_questions'] = $excluded_questions;

        return $this;
    }

    /**
     * Gets question_slug
     *
     * @return string
     */
    public function getQuestionSlug()
    {
        return $this->container['question_slug'];
    }

    /**
     * Sets question_slug
     *
     * @param string $question_slug question_slug
     *
     * @return $this
     */
    public function setQuestionSlug($question_slug)
    {
        $this->container['question_slug'] = $question_slug;

        return $this;
    }

    /**
     * Gets search_filters
     *
     * @return \Swagger\Client\Model\AnyOfFilteredQuestionsPayloadSearchFiltersItems[]
     */
    public function getSearchFilters()
    {
        return $this->container['search_filters'];
    }

    /**
     * Sets search_filters
     *
     * @param \Swagger\Client\Model\AnyOfFilteredQuestionsPayloadSearchFiltersItems[] $search_filters search_filters
     *
     * @return $this
     */
    public function setSearchFilters($search_filters)
    {
        $this->container['search_filters'] = $search_filters;

        return $this;
    }

    /**
     * Gets search_filters_operators
     *
     * @return \Swagger\Client\Model\AnyOfFilteredQuestionsPayloadSearchFiltersOperatorsItems[]
     */
    public function getSearchFiltersOperators()
    {
        return $this->container['search_filters_operators'];
    }

    /**
     * Sets search_filters_operators
     *
     * @param \Swagger\Client\Model\AnyOfFilteredQuestionsPayloadSearchFiltersOperatorsItems[] $search_filters_operators search_filters_operators
     *
     * @return $this
     */
    public function setSearchFiltersOperators($search_filters_operators)
    {
        $this->container['search_filters_operators'] = $search_filters_operators;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
